!function(){"use strict";var a=window.wp.blocks,o=window.wp.element,r=window.wp.i18n,e=window.wp.blockEditor,t=(window.wp.hooks,window.wp.components,window.lodash);window.wp.data,(0,r.__)("Href","dragblock"),(0,r.__)("Target","dragblock"),(0,r.__)("default","dragblock"),(0,r.__)("New Tab","dragblock"),(0,r.__)("Parent Tab","dragblock"),(0,r.__)("Same Tab","dragblock"),(0,r.__)("Out of Iframe","dragblock"),(0,r.__)("Rel","dragblock"),(0,r.__)("Tab Index","dragblock"),(0,r.__)("Src","dragblock"),(0,r.__)("Alt","dragblock"),(0,r.__)("Name","dragblock"),(0,r.__)("Placeholder","dragblock"),(0,r.__)("Title","dragblock"),(0,r.__)("Type","dragblock"),(0,r.__)("Value","dragblock"),(0,r.__)("Disabled","dragblock"),(0,r.__)("Required","dragblock"),(0,r.__)("Selected","dragblock"),(0,r.__)("Action","dragblock"),(0,r.__)("Method","dragblock"),(0,r.__)("For","dragblock"),(0,r.__)("Sizes","dragblock"),(0,r.__)("Loading","dragblock"),(0,r.__)("Loading immediately or wait viewport","dragblock"),(0,r.__)("Default","dragblock"),(0,r.__)("Lazy","dragblock"),(0,r.__)("Eager","dragblock"),wp.hooks.addFilter("blocks.registerBlockType","dragblock/attributes-register",(function(a,o){return a=Object.assign({},a,{attributes:Object.assign({},a.attributes,{dragBlockClientId:{type:"string"},anchor:{type:"string",source:"attribute",default:"",attribute:"id",selector:"*"},className:{type:"string",default:""},dragBlockAttrs:{type:"array",default:""}})}),-1!==o.indexOf("dragblock")&&(a=Object.assign({},a,{attributes:Object.assign({},a.attributes,{}),supports:Object.assign({},a.supports,{anchor:!0})})),a})),(0,r.__)("Home URL","dragblock"),(0,r.__)("Home URL","dragblock"),(0,r.__)("Latest Post URL","dragblock"),(0,r.__)("Blog URL with Latest Posts","dragblock"),(0,r.__)("Login URL","dragblock"),(0,r.__)("Login URL","dragblock"),(0,r.__)("Form Submission Error Message","dragblock"),(0,r.__)("Error message after submitting form","dragblock"),(0,r.__)("DragBlock Form Error: There is an uknown server error.","dragblock"),(0,r.__)("Post Title","dragblock"),(0,r.__)("The parsed post's Title","dragblock"),(0,r.__)("The DragBlock Post Title","dragblock"),(0,r.__)("Post URL","dragblock"),(0,r.__)("The parsed post's url","dragblock"),(0,r.__)("Post Image Thumbnail SRC","dragblock"),(0,r.__)("the parsed post's image src","dragblock"),(0,r.__)("Post Author URL","dragblock"),(0,r.__)("the parsed post's author page url","dragblock"),(0,r.__)("Post Author Name","dragblock"),(0,r.__)("The parsed post's author name","dragblock"),(0,r.__)("Author Name","dragblock"),(0,r.__)("Post Author Avatar SRC","dragblock"),(0,r.__)("The parsed post's author's avatar SRC","dragblock"),(0,r.__)("Post Author Bio","dragblock"),(0,r.__)("The parsed post's author's biography/description","dragblock"),(0,r.__)("Post Date Name","dragblock"),(0,r.__)("The parsed post's date","dragblock"),(0,r.__)("July 01, 2086","dragblock"),(0,r.__)("Post Comment Number","dragblock"),(0,r.__)("The parsed post's comment number","dragblock"),(0,r.__)("Post View Count","dragblock"),(0,r.__)("The parsed post's view count","dragblock"),(0,r.__)("Post Snippet","dragblock"),(0,r.__)("The parsed post's snippet","dragblock"),(0,r.__)("Get the first paragraph of the post content. If the post excerpt, a custom summary of the post that author manually inputted when composing the post content, exists, use that instead","dragblock"),(0,r.__)("Post Category Name","dragblock"),(0,r.__)("Category Name","dragblock"),(0,r.__)("Post Category URL","dragblock"),(0,r.__)("Post Tag Name","dragblock"),(0,r.__)("Tag Name","dragblock"),(0,r.__)("Post Tag URL","dragblock"),(0,r.__)("Twitter Share URL","dragblock"),(0,r.__)("Facebook Share URL","dragblock"),(0,r.__)("Whatsapp Share URL","dragblock"),(0,r.__)("Telegram Share URL","dragblock"),(0,r.__)("Tumblr Share URL","dragblock"),(0,r.__)("Reddit Share URL","dragblock"),(0,r.__)("LinkedIn Share URL","dragblock"),(0,r.__)("Gmail Share URL","dragblock"),(0,r.__)("Navigator Share URL","dragblock");var _=JSON.parse('{"u2":"dragblock/input"}');(0,a.registerBlockType)(_.u2,{edit:function(a){const{attributes:r,setAttributes:_,isSelected:l,clientId:s}=a;let{dragBlockAttrs:d,dragBlockClientId:c}=r;if(!d){const a=[{slug:"name",value:c||s},{slug:"type",value:"text"},{slug:"placeholder",value:"Input a text",locale:"en_US"}];_({dragBlockAttrs:(0,t.cloneDeep)(a)}),d=a}let g=(0,e.useBlockProps)();return(0,o.createElement)("input",{...g,onChange:()=>{}})},save:function(a){const{attributes:r}=a;let t=e.useBlockProps.save();return(0,o.createElement)("input",{...t})}})}();